%token identifier jcc::tokenizer::GenericType::Identifier
%token pp_lparen jcc::tokenizer::Punctuator::PpLeftParenthesis
%token lparen jcc::tokenizer::Punctuator::LeftParenthesis
%token rparen jcc::tokenizer::Punctuator::RightParenthesis
%token dec_op jcc::tokenizer::Punctuator::MinusMinus
%token inc_op jcc::tokenizer::Punctuator::PlusPlus
%token asterisk jcc::tokenizer::Punctuator::Asterisk
%token slash jcc::tokenizer::Punctuator::Slash
%token dot jcc::tokenizer::Punctuator::Dot
%token number jcc::tokenizer::GenericType::PpNumber
%token plus jcc::tokenizer::Punctuator::Plus
%token minus jcc::tokenizer::Punctuator::Minus
%token tilde jcc::tokenizer::Punctuator::Tilde
%token ampersand jcc::tokenizer::Punctuator::Ampersand
%token lshift jcc::tokenizer::Punctuator::LessThanLessThan
%token rshift jcc::tokenizer::Punctuator::GreaterThanGreaterThan
%token less jcc::tokenizer::Punctuator::LessThan
%token greater jcc::tokenizer::Punctuator::GreaterThan
%token eq_op jcc::tokenizer::Punctuator::EqualEqual
%token ne_op jcc::tokenizer::Punctuator::ExclamationMarkEqual
%token caret jcc::tokenizer::Punctuator::Caret
%token vertical_bar jcc::tokenizer::Punctuator::VerticalBar
%token and_op jcc::tokenizer::Punctuator::AmpersandAmpersand
%token or_op jcc::tokenizer::Punctuator::VerticalBarVerticalBar
%token question_mark jcc::tokenizer::Punctuator::QuestionMark
%token colon jcc::tokenizer::Punctuator::Colon
%token assign jcc::tokenizer::Punctuator::Equal
%token mul_assign jcc::tokenizer::Punctuator::AsteriskEqual
%token div_assign jcc::tokenizer::Punctuator::SlashEqual
%token mod_assign jcc::tokenizer::Punctuator::PercentEqual
%token add_assign jcc::tokenizer::Punctuator::PlusEqual
%token sub_assign jcc::tokenizer::Punctuator::MinusEqual
%token lshift_assign jcc::tokenizer::Punctuator::LessThanLessThanEqual
%token rshift_assign jcc::tokenizer::Punctuator::GreaterThanGreaterThanEqual
%token and_assign jcc::tokenizer::Punctuator::AmpersandEqual
%token xor_assign jcc::tokenizer::Punctuator::CaretEqual
%token or_assign jcc::tokenizer::Punctuator::VerticalBarEqual
%token comma jcc::tokenizer::Punctuator::Comma
%token exclamation_mark jcc::tokenizer::Punctuator::ExclamationMark
%token less_eq jcc::tokenizer::Punctuator::LessThanEqual
%token greater_eq jcc::tokenizer::Punctuator::GreaterThanEqual
%token mod jcc::tokenizer::Punctuator::Percent
%token typedef jcc::tokenizer::Keyword::Typedef
%token extern jcc::tokenizer::Keyword::Extern
%token static jcc::tokenizer::Keyword::Static
%token auto jcc::tokenizer::Keyword::Auto
%token register jcc::tokenizer::Keyword::Register
%token void jcc::tokenizer::Keyword::Void
%token char jcc::tokenizer::Keyword::Char
%token short jcc::tokenizer::Keyword::Short
%token int jcc::tokenizer::Keyword::Int
%token long jcc::tokenizer::Keyword::Long
%token float jcc::tokenizer::Keyword::Float
%token double jcc::tokenizer::Keyword::Double
%token signed jcc::tokenizer::Keyword::Signed
%token unsigned jcc::tokenizer::Keyword::Unsigned
%token const jcc::tokenizer::Keyword::Const
%token volatile jcc::tokenizer::Keyword::Volatile
%token semicolon jcc::tokenizer::Punctuator::Semicolon
%token lbrace jcc::tokenizer::Punctuator::LeftBrace
%token rbrace jcc::tokenizer::Punctuator::RightBrace
%token struct jcc::tokenizer::Keyword::Struct
%token union jcc::tokenizer::Keyword::Union
%token lbracket jcc::tokenizer::Punctuator::LeftBracket
%token rbracket jcc::tokenizer::Punctuator::RightBracket
%token ellipsis jcc::tokenizer::Punctuator::Ellipsis
%token case jcc::tokenizer::Keyword::Case
%token default jcc::tokenizer::Keyword::Default
%token return jcc::tokenizer::Keyword::Return
%token continue jcc::tokenizer::Keyword::Continue
%token break jcc::tokenizer::Keyword::Break
%token goto jcc::tokenizer::Keyword::Goto
%token if jcc::tokenizer::Keyword::If
%token else jcc::tokenizer::Keyword::Else
%token string jcc::tokenizer::GenericType::StringConstant
%token switch jcc::tokenizer::Keyword::Switch
%token bool jcc::tokenizer::Keyword::Bool

# ------------
# Expressions
# ------------

TranslationUnit
    ;

SPrime
    : TranslationUnit
    ;

Expression
    ;

PrimaryExpression
    : identifier
    | number
    | string
    | lparen Expression rparen
    | pp_lparen Expression rparen
    ;

MemberAccessCont
    : dot identifier
    ;

FunctionInvocCont
    : lparen rparen
    | pp_lparen rparen
    | lparen Expression rparen
    | pp_lparen Expression rparen
    ;

PostfixExpression
    : PrimaryExpression
    | PostfixExpression MemberAccessCont
    | PostfixExpression FunctionInvocCont
    | PostfixExpression inc_op
    | PostfixExpression dec_op
    ;

UnaryOperator
    : asterisk
    | plus
    | minus
    | tilde
    | ampersand
    | exclamation_mark
    ;

UnaryExpression
    : PostfixExpression
    | inc_op UnaryExpression
    | dec_op UnaryExpression
    | UnaryOperator UnaryExpression
    ;

MultiplicativeCont
    : asterisk UnaryExpression
    | slash UnaryExpression
    | mod UnaryExpression
    ;

Multiplicative
    : UnaryExpression
    | Multiplicative MultiplicativeCont
    ;

AdditiveCont
    : plus Multiplicative
    | minus Multiplicative
    ;

Additive
    : Multiplicative
    | Additive AdditiveCont
    ;

ShiftCont
    : lshift Additive
    | rshift Additive
    ;

ShiftExpression
    : Additive
    | ShiftExpression ShiftCont
    ;

RelationalCont
    : less ShiftExpression
    | greater ShiftExpression
    | less_eq ShiftExpression
    | greater_eq ShiftExpression
    ;

RelationalExpression
    : ShiftExpression
    | RelationalExpression RelationalCont
    ;

EqualityCont
    : eq_op RelationalExpression
    | ne_op RelationalExpression
    ;

EqualityExpression
    : RelationalExpression
    | EqualityExpression EqualityCont
    ;

AndExpressionCont
    : ampersand EqualityExpression
    ;

AndExpression
    : EqualityExpression
    | AndExpression AndExpressionCont
    ;

ExclusiveOrExpressionCont
    : caret AndExpression
    ;

ExclusiveOrExpression
    : AndExpression
    | ExclusiveOrExpression ExclusiveOrExpressionCont
    ;

InclusiveOrExpressionCont
    : vertical_bar ExclusiveOrExpression
    ;

InclusiveOrExpression
    : ExclusiveOrExpression
    | InclusiveOrExpression InclusiveOrExpressionCont
    ;

LogicalAndExpressionCont
    : and_op InclusiveOrExpression
    ;

LogicalAndExpression
    : InclusiveOrExpression
    | LogicalAndExpression LogicalAndExpressionCont
    ;

LogicalOrExpressionCont
    : or_op LogicalAndExpression
    ;

LogicalOrExpression
    : LogicalAndExpression
    | LogicalOrExpression LogicalOrExpressionCont
    ;

ConditionalExpression
    ;

ConditionalExpressionCont2
    : colon ConditionalExpression
    ;

ConditionalExpressionCont
    : question_mark Expression ConditionalExpressionCont2
    ;

ConditionalExpression
    : LogicalOrExpression
    | LogicalOrExpression ConditionalExpressionCont
    ;

AssignmentOperator
    : assign
    | mul_assign
    | div_assign
    | mod_assign
    | add_assign
    | sub_assign
    | lshift_assign
    | rshift_assign
    | and_assign
    | xor_assign
    | or_assign
    ;

AssignmentExpression
    ;

AssignmentCont
    : AssignmentOperator AssignmentExpression
    ;

AssignmentExpression
    : ConditionalExpression
    | UnaryExpression AssignmentCont
    ;

ExpressionCont
    : comma AssignmentExpression
    ;

Expression
    : AssignmentExpression
    | Expression ExpressionCont
    ;

ConstantExpression
    : ConditionalExpression
    ;

# ------------
# Declarations
# ------------

StorageClassSpecifier
    : typedef
    | extern
    | static
    | auto
    | register
    ;

StructOrUnion
    : struct
    | union
    ;

StructDeclaration
    ;

StructDeclarationList
    : StructDeclaration
    | StructDeclarationList StructDeclaration
    ;

TypeSpecifier
    ;

TypeQualifier
    ;

SpecifierQualifierList
    : TypeSpecifier
    | TypeSpecifier SpecifierQualifierList
    | TypeQualifier
    | TypeQualifier SpecifierQualifierList
    ;

Pointer
    ;

Declarator
    ;

IdentifierListCont
    : comma identifier
    ;

IdentifierList
    : identifier
    | IdentifierList IdentifierListCont
    ;

DirectAbstractDeclarator
    ;

AbstractDeclarator
    : Pointer
    | DirectAbstractDeclarator
    | Pointer DirectAbstractDeclarator
    ;

ParameterTypeList
    ;

DirectAbstractDeclaratorCont
    : lbracket rbracket
    | lbracket ConstantExpression rbracket
    | lparen rparen
    | pp_lparen rparen
    | lparen ParameterTypeList rparen
    | pp_lparen ParameterTypeList rparen
    ;

DirectAbstractDeclarator
    : lbracket rbracket
    | lbracket ConstantExpression rbracket
    | lparen rparen
    | pp_lparen rparen
    | lparen AbstractDeclarator rparen
    | pp_lparen AbstractDeclarator rparen
    | DirectAbstractDeclarator DirectAbstractDeclaratorCont
    ;

DeclarationSpecifiers
    ;

ParameterDeclaration
    : DeclarationSpecifiers
    | DeclarationSpecifiers Declarator
    | DeclarationSpecifiers AbstractDeclarator
    ;

ParameterListCont
    : comma ParameterDeclaration
    ;

ParameterList
    : ParameterDeclaration
    | ParameterList ParameterListCont
    ;

ParameterTypeListCont
    : comma ellipsis
    ;

ParameterTypeList
    : ParameterList
    | ParameterList ParameterTypeListCont
    ;

DirectDeclaratorCont
    : lbracket rbracket
    | lbracket ConstantExpression rbracket
    | lparen rparen
    | pp_lparen rparen
    | lparen IdentifierList rparen
    | pp_lparen IdentifierList rparen
    | lparen ParameterTypeList rparen
    | pp_lparen ParameterTypeList rparen
    ;

DirectDeclarator
    : identifier
    | lparen Declarator rparen
    | pp_lparen Declarator rparen
    | DirectDeclarator DirectDeclaratorCont
    ;

Declarator
    : Pointer DirectDeclarator
    | DirectDeclarator
    ;

StructDeclaratorCont
    : colon ConstantExpression
    ;

StructDeclarator
    : Declarator
    | colon ConstantExpression
    | Declarator StructDeclaratorCont
    ;

StructDeclaratorListCont
    : comma StructDeclarator
    ;

StructDeclaratorList
    : StructDeclarator
    | StructDeclaratorList StructDeclaratorListCont
    ;

StructDeclarationCont
    : StructDeclaratorList semicolon
    ;

StructDeclaration
    : SpecifierQualifierList StructDeclarationCont
    ;

StructOrUnionSpecifierCont
    : lbrace StructDeclarationList rbrace
    ;

StructOrUnionSpecifier
    : StructOrUnion identifier
    | StructOrUnion StructOrUnionSpecifierCont
    ;

TypeSpecifier
    : void
    | char
    | short
    | int
    | long
    | float
    | double
    | signed
    | unsigned
    | bool
    | StructOrUnionSpecifier
    # TODO: enum specifier
    # TODO: typedef name
    ;

TypeQualifier
    : const
    | volatile
    ;

DeclarationSpecifiers
    : StorageClassSpecifier
    | StorageClassSpecifier DeclarationSpecifiers
    | TypeSpecifier
    | TypeSpecifier DeclarationSpecifiers
    | TypeQualifier
    | TypeQualifier DeclarationSpecifiers
    ;

TypeQualifierList
    : TypeQualifier
    | TypeQualifierList TypeQualifier
    ;

Pointer
    : asterisk
    | asterisk TypeQualifierList
    | asterisk Pointer
    | asterisk TypeQualifierList Pointer
    ;

InitializerList
    ;

Initializer
    : AssignmentExpression
    | lbrace InitializerList rbrace
    | lbrace InitializerList comma rbrace
    ;

InitializerListCont
    : comma Initializer
    ;

InitializerList
    : Initializer
    | InitializerList InitializerListCont
    ;

InitDeclaratorCont
    : assign Initializer
    ;

InitDeclarator
    : Declarator
    | Declarator InitDeclaratorCont
    ;

InitDeclaratorListCont
    : comma InitDeclarator
    ;

InitDeclaratorList
    : InitDeclarator
    | InitDeclaratorList InitDeclaratorListCont
    ;

DeclarationCont
    : InitDeclaratorList semicolon
    ;

Declaration
    : DeclarationSpecifiers semicolon
    | DeclarationSpecifiers DeclarationCont
    ;

DeclarationList
    : Declaration
    | DeclarationList Declaration
    ;

Statement
    ;

Label
    # TODO: attribute specifier sequence
    : identifier colon
    | case ConstantExpression colon
    | default colon
    ;

#LabeledStatement
#    : Label Statement
#    ;

ExpressionStatement
    : semicolon
    | Expression semicolon
    # TODO: attribute specifier sequence + Expression + semicolon
    ;

ReturnCont
    : semicolon
    | Expression semicolon
    ;

JumpStatement
    : return ReturnCont
    | continue semicolon
    | break semicolon
    | goto identifier semicolon
    ;

CompoundStatement
    ;

SecondaryBlock
    : Statement
    ;

SelectionExpression
    : lparen Expression rparen
    ;

UnlabeledStatement
    ;

SelectionStatement
    : if SelectionExpression SecondaryBlock
    # TODO: For some reason else doesn't want to work
    | if SelectionExpression SecondaryBlock else SecondaryBlock
    | switch SelectionExpression SecondaryBlock
    ;

PrimaryBlock
    : CompoundStatement
    | SelectionStatement
    ;

UnlabeledStatement
    : ExpressionStatement
    | JumpStatement
    | PrimaryBlock
    # TODO: attribute specifier sequence + PrimaryBlock / JumpStatement
    ;

Statement
    #: LabeledStatement
    | UnlabeledStatement
    ;

BlockItem
    : Declaration
    | UnlabeledStatement
    | Label
    ;

BlockItemList
    : BlockItem
    | BlockItemList BlockItem
    ;

CompoundStatement
    : lbrace rbrace
    | lbrace BlockItemList rbrace
    ;

FunctionDefinition
    : DeclarationSpecifiers Declarator DeclarationList CompoundStatement
    | DeclarationSpecifiers Declarator CompoundStatement
    | Declarator DeclarationList CompoundStatement
    | Declarator CompoundStatement
    ;

ExternalDeclaration
    : Declaration
    | FunctionDefinition
    ;

TranslationUnit
    : ExternalDeclaration
    | TranslationUnit ExternalDeclaration
    ;
